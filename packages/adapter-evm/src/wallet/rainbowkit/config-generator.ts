import { UiKitConfiguration } from '@openzeppelin/transaction-form-types';

/**
 * Generates the content for a `rainbowkit.config.ts` file for an exported project.
 * It merges the user-provided configuration with the necessary boilerplate to ensure
 * the config is valid for RainbowKit's `getDefaultConfig`.
 *
 * @param userConfig - The user-provided configuration from the form builder.
 * @returns A string containing the formatted TypeScript code for the config file.
 */
export function generateRainbowKitConfigFile(userConfig: UiKitConfiguration['kitConfig']): string {
  const config = (userConfig || {}) as Record<string, unknown>;
  const appName = (config.appName as string) || 'My RainbowKit App';
  const learnMoreUrl = (config.learnMoreUrl as string) || 'https://openzeppelin.com';
  // We provide a default projectId as it's required by RainbowKit for WalletConnect.
  const projectId = (config.projectId as string) || 'YOUR_PROJECT_ID';

  const wagmiParams = {
    appName,
    projectId,
  };

  // Conditionally build the appInfo object
  const appInfo: { appName: string; learnMoreUrl?: string } = { appName };
  if (learnMoreUrl) {
    appInfo.learnMoreUrl = learnMoreUrl;
  }

  const fileContent = `
// Generated by the OpenZeppelin Transaction Form Builder
// This file contains the configuration for RainbowKit.
import type { RainbowKitProvider } from '@rainbow-me/rainbowkit';
import type React from 'react';

// Infer props type from RainbowKitProvider for stronger typing.
type InferredRainbowKitProviderProps = React.ComponentProps<typeof RainbowKitProvider>;

const rainbowKitAppConfig = {
  wagmiParams: ${JSON.stringify(wagmiParams, null, 2)},
  providerProps: {
    appInfo: ${JSON.stringify(appInfo, null, 2)},
  } as Partial<InferredRainbowKitProviderProps>,
};

export default rainbowKitAppConfig;
  `;

  return fileContent;
}
