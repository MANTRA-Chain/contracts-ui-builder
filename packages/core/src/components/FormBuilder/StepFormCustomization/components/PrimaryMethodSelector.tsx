import React from 'react';
import { useController } from 'react-hook-form';

import { OptionSelector, SelectableOption } from '../../../Common/OptionSelector';
import { TitledSection } from '../../../Common/TitledSection';
import type { PrimaryMethodSelectorProps } from '../types';

import { EoaConfiguration } from './EoaConfiguration';

interface ExecutionMethodOption extends SelectableOption {
  value: string;
}

export function PrimaryMethodSelector({
  control,
  adapterAvailable,
  options,
  watchedEoaOption,
  adapter,
}: PrimaryMethodSelectorProps): React.ReactElement {
  // Use controller from react-hook-form to manage the selected value
  const { field } = useController({
    name: 'executionMethodType',
    control,
    defaultValue: 'eoa', // Default to EOA
  });

  // Transform options for the selector component
  const selectorOptions: ExecutionMethodOption[] = options.map((option) => ({
    id: option.value,
    label: option.label,
    disabled: option.disabled,
    value: option.value,
  }));

  // Generate configuration content for the selected method
  const configContent = (() => {
    if (!adapterAvailable) return undefined;

    if (field.value === 'eoa') {
      return (
        <EoaConfiguration
          control={control}
          adapter={adapter || null}
          watchedEoaOption={watchedEoaOption}
        />
      );
    }

    if (field.value === 'multisig') {
      return (
        <div className="h-full flex flex-col items-center justify-center py-8">
          <p className="text-muted-foreground text-center text-sm">
            Multisig (e.g., Safe, Squads) configuration options will be available here in a future
            update.
          </p>
        </div>
      );
    }

    if (field.value === 'relayer') {
      return (
        <div className="h-full flex flex-col items-center justify-center py-8">
          <p className="text-muted-foreground text-center text-sm">
            OpenZeppelin transaction relayer configuration options will be available here in a
            future update.
          </p>
        </div>
      );
    }

    return undefined;
  })();

  return (
    <TitledSection
      title="Transaction Execution"
      description="Select how transactions generated by this form should be executed."
      isAvailable={adapterAvailable}
      unavailableMessage="No blockchain adapter selected."
    >
      <OptionSelector
        options={selectorOptions}
        selectedId={field.value || null}
        onSelect={field.onChange}
        configContent={configContent}
      />
    </TitledSection>
  );
}

PrimaryMethodSelector.displayName = 'PrimaryMethodSelector';
